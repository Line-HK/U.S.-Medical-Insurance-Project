{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# U.S. Medical Insurance Costs"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**The approach we wanted to take was to find the different insurance costs by region and see if we could find the causes**\n",
    "**behind the differences**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import csv\n",
    "import numpy\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "from sklearn.linear_model import LinearRegression"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " **import data and make it managable**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "ages = []\n",
    "sex_temp = []\n",
    "bmis = []\n",
    "children = []\n",
    "smoker_temp = []\n",
    "regions = []\n",
    "charges = []"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# import data from csv into lists \n",
    "\n",
    "with open(\"insurance.csv\", newline = '') as insurance_csv:\n",
    "    insurance_dict_temp = csv.DictReader(insurance_csv)\n",
    "    for row in insurance_dict_temp:\n",
    "        ages.append(int(row['age']))\n",
    "        sex_temp.append(row['sex'])\n",
    "        bmis.append(float(row['bmi']))\n",
    "        children.append(int(row['children']))\n",
    "        smoker_temp.append(row['smoker'])\n",
    "        regions.append(row['region'])\n",
    "        charges.append(float(row['charges']))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "sexes = []\n",
    "for sex in sex_temp:\n",
    "    if sex == 'female':\n",
    "        sexes.append(0)\n",
    "    elif sex == 'male':\n",
    "        sexes.append(1)\n",
    "    else:\n",
    "        print('there seems to be a problem with the data, please review the data and try again')\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "smoker = []\n",
    "for i in smoker_temp:\n",
    "    if i == 'no':\n",
    "        smoker.append(0)\n",
    "    elif i == 'yes':\n",
    "        smoker.append(1)\n",
    "    else:\n",
    "        print('there seems to be a problem with the data, please review the data and try again')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Continue\n"
     ]
    }
   ],
   "source": [
    "# test to see if all the lists are equally long, otherwise your dictionary data will get switched and wond match \n",
    "\n",
    "if len(ages) == len(sexes) == len(bmis) == len(children) == len(smoker) == len(regions) == len(charges):\n",
    "    print('Continue')\n",
    "else:\n",
    "    print('Some Data seems to be missing, check your dataset and try agan')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "insurance_dict = {}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in range(len(ages)):\n",
    "    ID = i\n",
    "    temp_dict = {}\n",
    "    temp_dict['age'] = int(ages[i])\n",
    "    temp_dict['sex'] = sexes[i]\n",
    "    temp_dict['bmi'] = float(bmis[i])\n",
    "    temp_dict['children'] = int(children[i])\n",
    "    temp_dict['smoker'] = smoker[i]\n",
    "    temp_dict['region'] = regions[i]\n",
    "    temp_dict['charge'] = float(charges[i])\n",
    "    insurance_dict[ID] = temp_dict    \n",
    "    \n",
    "# test: print(insurance_dict[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "def mean(list):\n",
    "    sum = 0\n",
    "    for i in list:\n",
    "        sum += float(i)\n",
    "    mean = sum/len(list)\n",
    "    return mean"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**look at distribution of ages and find effect of ages on charge**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ages goes from 18 to 64 years old, with a scope of 46\n"
     ]
    }
   ],
   "source": [
    "# find range:\n",
    "print('ages goes from {} to {} years old, with a scope of {}'.format(min(ages), max(ages), (int(max(ages)))-(int(min(ages)))))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n"
     ]
    }
   ],
   "source": [
    "\n",
    "teens = []\n",
    "twenties = []\n",
    "thirties = []\n",
    "fourties = []\n",
    "fifties = []\n",
    "sixties = []\n",
    "\n",
    "for i in range(len(ages)):\n",
    "    if int(ages[i]) >= 10 and int(ages[i]) < 20:\n",
    "        teens.append(float(charges[i]))\n",
    "    elif int(ages[i]) >= 20 and int(ages[i]) < 30:\n",
    "        twenties.append(float(charges[i]))\n",
    "    elif int(ages[i]) >= 30 and int(ages[i]) < 40:\n",
    "        thirties.append(float(charges[i]))\n",
    "    elif int(ages[i]) >= 40 and int(ages[i]) < 50:\n",
    "        fourties.append(float(charges[i]))\n",
    "    elif int(ages[i]) >= 50 and int(ages[i]) < 60:\n",
    "        fifties.append(float(charges[i]))\n",
    "    elif int(ages[i]) >= 60 and int(ages[i]) < 70:\n",
    "        sixties.append(float(charges[i]))\n",
    "    else:\n",
    "        print('age of individual nr. {} is out of range, reevaluate range and try again'.format(i))\n",
    "        \n",
    "        \n",
    "# make sure that all values were assigned:        \n",
    "print(len(teens) + len(twenties) + len(thirties) + len(fourties) + len(fifties) + len(sixties) == len(ages))\n",
    "                "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "ages_dict = {'teens':mean(teens), 'twenties':mean(twenties), 'thirties':mean(thirties), 'fourties':mean(fourties), 'fifties':mean(fifties), 'sixties':mean(sixties)}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x24e0b02b388>"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# shows mean charge for each age group\n",
    "\n",
    "plt.scatter([15, 25, 35, 45, 55, 65], ages_dict.values())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**look at distribution of bmis and find effect of bmis on charge**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "bmi goes from 15.96 to 53.13, with a scope of 37.17\n"
     ]
    }
   ],
   "source": [
    "#find range:\n",
    "print('bmi goes from {} to {}, with a scope of {}'.format(min(bmis), max(bmis), (float(max(bmis)))-(float(min(bmis)))))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n"
     ]
    }
   ],
   "source": [
    "\n",
    "bmi_15_20 = []\n",
    "bmi_20_25 = []\n",
    "bmi_25_30 = []\n",
    "bmi_30_35 = []\n",
    "bmi_35_40 = []\n",
    "bmi_40_45 = []\n",
    "bmi_45_50 = []\n",
    "bmi_50_55 = []\n",
    "\n",
    "\n",
    "\n",
    "for i in range(len(bmis)):\n",
    "    if float(bmis[i]) >= 15 and float(bmis[i]) < 20:\n",
    "        bmi_15_20.append(float(charges[i]))\n",
    "    elif float(bmis[i]) >= 20 and float(bmis[i]) < 25:\n",
    "        bmi_20_25.append(float(charges[i]))\n",
    "    elif float(bmis[i]) >= 25 and float(bmis[i]) < 30:\n",
    "        bmi_25_30.append(float(charges[i]))\n",
    "    elif float(bmis[i]) >= 30 and float(bmis[i]) < 35:\n",
    "        bmi_30_35.append(float(charges[i]))\n",
    "    elif float(bmis[i]) >= 35 and float(bmis[i]) < 40:\n",
    "        bmi_35_40.append(float(charges[i]))\n",
    "    elif float(bmis[i]) >= 40 and float(bmis[i]) < 45:\n",
    "        bmi_40_45.append(float(charges[i]))\n",
    "    elif float(bmis[i]) >= 45 and float(bmis[i]) < 50:\n",
    "        bmi_45_50.append(float(charges[i]))\n",
    "    elif float(bmis[i]) >= 50 and float(bmis[i]) < 55:\n",
    "        bmi_50_55.append(float(charges[i]))\n",
    "    else:\n",
    "        print('bmi of individual nr. {} is out of range, reevaluate range and try again'.format(i))\n",
    "        \n",
    "# make sure that all values were assigned:        \n",
    "print(len(bmi_15_20) + len(bmi_20_25) + len(bmi_25_30) + len(bmi_30_35) + len(bmi_35_40) + len(bmi_40_45) + len(bmi_45_50) + len(bmi_50_55) == len(bmis))\n",
    "                "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "bmi_dict = {'bmi_15_20':mean(bmi_15_20), 'bmi_20_25':mean(bmi_20_25), 'bmi_25_30':mean(bmi_25_30), 'bmi_30_35':mean(bmi_30_35), 'bmi_35_40':mean(bmi_35_40), 'bmi_40_45':mean(bmi_40_45), 'bmi_45_50':mean(bmi_45_50), 'bmi_50_55':mean(bmi_50_55)}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x24e0b0f0048>"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# shows mean charge for each bmi group\n",
    "\n",
    "plt.scatter([17.5, 22.5, 27.5, 32.5, 37.5, 42.5, 47.5, 52.5], bmi_dict.values())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**look at distribution of number of children and find effect of ages on charge**\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "num_children goes from 0 to 5, with a scope of 5\n"
     ]
    }
   ],
   "source": [
    "#find range:\n",
    "print('num_children goes from {} to {}, with a scope of {}'.format(min(children), max(children), (int(max(children)))-(int(min(children)))))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n"
     ]
    }
   ],
   "source": [
    "none = []\n",
    "one = []\n",
    "two = []\n",
    "three = []\n",
    "four = []\n",
    "five = []\n",
    "\n",
    "for i in range(len(children)):\n",
    "    if int(children[i]) == 0:\n",
    "        none.append(float(charges[i]))\n",
    "    elif int(children[i]) == 1:\n",
    "        one.append(float(charges[i]))\n",
    "    elif int(children[i]) == 2:\n",
    "        two.append(float(charges[i]))\n",
    "    elif int(children[i]) == 3:\n",
    "        three.append(float(charges[i]))\n",
    "    elif int(children[i]) == 4:\n",
    "        four.append(float(charges[i]))\n",
    "    elif int(children[i]) == 5:\n",
    "        five.append(float(charges[i]))\n",
    "    else:\n",
    "        print('num_children for nr. {} is out of range, reevaluate range and try again'.format(i))\n",
    "        \n",
    "        \n",
    "# make sure that all values were assigned:        \n",
    "print(len(none) + len(one) + len(two) + len(three) + len(four) + len(five) == len(ages))\n",
    "                "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "children_dict = {'none':mean(none), 'one':mean(one), 'two':mean(two), 'three':mean(three), 'four':mean(four), 'five':mean(five)}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x24e0b15a748>"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# shows mean charge for each age group\n",
    "\n",
    "plt.scatter([0, 1, 2, 3, 4, 5], children_dict.values())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**demonstrate effect of sex and smoking on overall charge**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(df['smoker'], df['charge'], color = \"red\")\n",
    "plt.title('Smokers', fontsize=14)\n",
    "plt.show()\n",
    "\n",
    "\n",
    "plt.scatter(df['sex'], df['charge'], color = \"blue\")\n",
    "plt.title('Gender', fontsize=14)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**find estimated effect of each variable, to see to which degree the variables can explain the variance in cost**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.749722509870918\n",
      "-12052.461985664748\n",
      "[23823.39253065  -128.63985357   257.73498767   322.36421449\n",
      "   474.41112061]\n",
      "\n",
      "a fraction of 0.749722509870918 of the variance in cost can be explained by the given varables, \n",
      "the estimated effect of each variable on the overall charge is: \n",
      "smoker: 23823.392530652593, sex: -128.63985356969596, age:257.7349876692449, bmi:322.3642144860744, num_children:474.41112061269115\n"
     ]
    }
   ],
   "source": [
    "#Find the causes of differences using Linear Regression\n",
    "\n",
    "#Group together predictors\n",
    "x = []\n",
    "for i in range(len(smoker)):\n",
    "    x.append([smoker[i], sexes[i], ages[i], bmis[i], children[i]])\n",
    "\n",
    "#Group together dependent variable    \n",
    "y = []\n",
    "for i in range(len(charges)):\n",
    "    y.append(charges[i])\n",
    "\n",
    "#turn into numpy arrays\n",
    "x = numpy.array(x)\n",
    "y = numpy.array(y)\n",
    "\n",
    "#run regression\n",
    "model = LinearRegression().fit(x,y)\n",
    "\n",
    "r_sq = model.score(x, y)\n",
    "\n",
    "#print results\n",
    "print(r_sq)\n",
    "print(model.intercept_)\n",
    "print(model.coef_) \n",
    "\n",
    "\n",
    "print('''\n",
    "a fraction of {} of the variance in cost can be explained by the given varables, \n",
    "the estimated effect of each variable on the overall charge is: \n",
    "smoker: {}, sex: {}, age:{}, bmi:{}, num_children:{}'''.format(r_sq, model.coef_[0], model.coef_[1], model.coef_[2], model.coef_[3], model.coef_[4],))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Find cost per region and distributions of variables, sex, smoker, age, bmi and num_children as mean per region**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "region\n",
      "northeast    13406.384516\n",
      "northwest    12417.575374\n",
      "southeast    14735.411438\n",
      "southwest    12346.937377\n",
      "Name: charge, dtype: float64\n",
      "region\n",
      "northeast    0.503086\n",
      "northwest    0.495385\n",
      "southeast    0.519231\n",
      "southwest    0.501538\n",
      "Name: sex, dtype: float64\n",
      "region\n",
      "northeast    0.206790\n",
      "northwest    0.178462\n",
      "southeast    0.250000\n",
      "southwest    0.178462\n",
      "Name: smoker, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "#Find the average cost per region along with regional distributions of sex and smoker\n",
    "df = pd.DataFrame.from_dict(insurance_dict, orient='index')\n",
    "\n",
    "df['charge'] = pd.to_numeric(df['charge'])\n",
    "\n",
    "#print(df.dtypes)\n",
    "\n",
    "df1 = df.groupby('region')['charge'].mean()\n",
    "df2 = df.groupby('region')['sex'].mean()\n",
    "df3 = df.groupby('region')['smoker'].mean()\n",
    "\n",
    "print(df1.head(5))\n",
    "print(df2.head(5))\n",
    "print(df3.head(5))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "region\n",
      "northeast    39.268519\n",
      "northwest    39.196923\n",
      "southeast    38.939560\n",
      "southwest    39.455385\n",
      "Name: age, dtype: float64\n",
      "region\n",
      "northeast    29.173503\n",
      "northwest    29.199785\n",
      "southeast    33.355989\n",
      "southwest    30.596615\n",
      "Name: bmi, dtype: float64\n",
      "region\n",
      "northeast    1.046296\n",
      "northwest    1.147692\n",
      "southeast    1.049451\n",
      "southwest    1.141538\n",
      "Name: children, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "#Find the average per region for continuous values\n",
    "df = pd.DataFrame.from_dict(insurance_dict, orient='index')\n",
    "\n",
    "df['charge'] = pd.to_numeric(df['charge'])\n",
    "\n",
    "#print(df.dtypes)\n",
    "\n",
    "df4 = df.groupby('region')['age'].mean()\n",
    "df5 = df.groupby('region')['bmi'].mean()\n",
    "df6 = df.groupby('region')['children'].mean()\n",
    "\n",
    "print(df4.head(5))\n",
    "print(df5.head(5))\n",
    "print(df6.head(5))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**FINDINGS : the Southeast region has the highest medical insurance costs of the 4 regions in the data.\n",
    "Some of this difference can be put down to the region having the highest number of smokers and the highest average bmi**\n",
    "\n",
    "**The number of children a patient had and a patient's average age did not have a significant effect on the higher medical costs in the south east region\n",
    "**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "** From the muliple linear regression whether or not a patient was a smoker has the largest effect on their insurance cost**"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
